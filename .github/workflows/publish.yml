name: Publish
concurrency:
  group: publish-${{ github.ref }}-${{ github.event_name }}
  cancel-in-progress: true
permissions: write-all
defaults:
  run:
    shell: bash
on:
  workflow_call:
    inputs:
      ref:
        required: true
        type: string
        description: GITHUB_SHA ref to checkout and to link annotations to
        default: ""
  workflow_dispatch:
    inputs:
      confirmation:
        description: "Are you sure you want to publish packages to nuget.org?"
        required: true
        default: "no"
        type: choice
        options:
          - "no"
          - "yes"
  push:
    branches:
      - release/v*
env:
  DOCKER_BUILDKIT: 1
  DOTNET_SYSTEM_CONSOLE_ALLOW_ANSI_COLOR_REDIRECTION: "true"
  DOTNET_CLI_UI_LANGUAGE: en-US
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: 1
  DOTNET_SVCUTIL_TELEMETRY_OPTOUT: 1
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  DOTNET_ROLL_FORWARD: Major
  DOTNET_ROLL_FORWARD_TO_PRERELEASE: 1
  DOTNET_SYSTEM_GLOBALIZATION_INVARIANT: "false"
  POWERSHELL_TELEMETRY_OPTOUT: 1
  POWERSHELL_UPDATECHECK_OPTOUT: 1
jobs:
  publish:
    if: ${{ github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && inputs.confirmation == 'yes') || github.event_name == 'workflow_call' }}
    name: Publish
    runs-on: ubuntu-latest
    steps:

      - name: git checkout / on 'workflow_call'
        if: ${{ inputs.ref != '' }}
        uses: actions/checkout@v3
        with:
          clean: false
          ref: ${{ inputs.ref }}
          fetch-depth: 0

      - name: git checkout / on non-'workflow_call'
        if: ${{ inputs.ref == '' }}
        uses: actions/checkout@v3
        with:
          clean: false
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      - name: Save & forward default env variables
        id: gh
        run: |
          env | grep -E '^(GITHUB_|CI)' | grep -E GITHUB_SHA= --invert-match >> $GITHUB_ENV
          sha=$(git rev-parse HEAD)
          echo "GITHUB_SHA=$sha" >> $GITHUB_ENV
          echo -e "\033[38;5;99;5;16msha: $sha\033[0m"
          echo "::set-output name=sha::$sha"
          echo "::add-matcher::./.github/csc.json"

      - name: Generate version variables
        id: nbgv
        uses: dotnet/nbgv@master
        with:
          setAllVars: true

      - name: Verify the public branch name matches version.json
        if: ${{ github.event_name == 'push' && steps.nbgv.outputs.PublicRelease == 'True' && endsWith(github.ref, steps.nbgv.outputs.MajorMinorVersion) != true && github.ref != 'refs/heads/master' }}
        run: |
          echo "::error::The branch name ${{ github.ref }} does not match version.json: ${{ steps.nbgv.outputs.MajorMinorVersion }}"
          exit 1

      - name: Verify that non-public branch has a prerelease suffix in version.json
        if: ${{ steps.nbgv.outputs.PublicRelease == 'False' && steps.nbgv.outputs.PrereleaseVersionNoLeadingHyphen == '' }}
        run: |
          echo "::error::The non-public branch ${{ github.ref }} must have a prerelease suffix in version.json: ${{ steps.nbgv.outputs.MajorMinorVersion }}"
          exit 1

      - name: Verify that master branch has a prerelease suffix in version.json
        if: ${{ github.ref == 'refs/heads/master' && steps.nbgv.outputs.PrereleaseVersionNoLeadingHyphen == '' }}
        run: |
          echo "::error::The master branch ${{ github.ref }} must have a prerelease suffix in version.json: ${{ steps.nbgv.outputs.MajorMinorVersion }}"
          exit 1

      - name: NuGet cache restore
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: dotnet build
        id: build
        uses: vchirikov/.github/shell-and-report-action@master
        with:
          commands: |-
            dotnet build --nologo -c Debug -p:GenerateFullPaths=true /clp:NoSummary | sed -E 's/^(.*?)(error [A-Z0-9]{3,}:)(.*)$/- \1\2\3/g'
          report-start: |-
            :gear: Run publish... `༼ つ ◕_◕ ༽つ`
          report-failure: |-
            ❌ Build failed  `(╯°□°)╯︵ ┻━┻`

            <details open> <summary> dotnet build output </summary>

            ```diff
            {0}
            ```

            </details>

      - name: dotnet test
        id: tests
        uses: vchirikov/.github/shell-action@master
        with:
          commands: |-
            dotnet test --nologo --no-build --filter 'FullyQualifiedName~UnitTests' --blame-hang --blame-hang-timeout 60s --logger:"github;name=unit-tests;GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}" | sed -E 's/^([[:space:]]+Failed [a-z_A-Z0-9]{3,})(.*)$/- \1\2/g'

      - name: Report tests success
        if: ${{ steps.tests.outcome == 'success' }}
        uses: mshick/add-pr-comment@07f690343c25a94e24a8acb70d03c86b701ae322
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          allow-repeats: true
          message: |
            ✅ Running unit tests on `${{ steps.nbgv.outputs.SemVer2 }}` version was successful!

            ${{ fromJSON(steps.tests.outputs.dynamic).summary }}

            `(•_•)          ( •_•)>⌐■-■          (⌐■_■)`

      - name: Report tests failed
        if: ${{ failure() && steps.tests.outcome == 'failure' }}
        uses: mshick/add-pr-comment@07f690343c25a94e24a8acb70d03c86b701ae322
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          allow-repeats: true
          message: |
            ❌ Tests failed. `(╯°□°)╯︵ ┻━┻`

            ${{ fromJSON(steps.tests.outputs.dynamic).summary }}

            <details open> <summary> Tests output </summary>

            ```diff
            ${{ steps.tests.outputs.out }}
            ```

            </details>

      - name: dotnet pack & publish
        id: publish
        uses: vchirikov/.github/shell-and-report-action@master
        with:
          commands: |-
            dotnet pack --no-restore --nologo -c Release -p:GenerateFullPaths=true /clp:NoSummary dotnet test --nologo --no-build --filter 'FullyQualifiedName~UnitTests' --blame-hang --blame-hang-timeout 60s --logger:"github;name=unit-tests;GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }} | sed -E 's/^(.*?)(error [A-Z0-9]{3,}:)(.*)$/- \1\2\3/g'
            dotnet nuget push artifacts/nupkg/*.nupkg --api-key ${{ secrets.NUGET_TOKEN }}  --source https://api.nuget.org/v3/index.json --force-english-output --timeout 20 --skip-duplicate | sed -E 's/^(.*?)(error)(.*)$/- \1\2\3/g'
          report-success: |-
            🎉 Version `${{ steps.nbgv.outputs.SemVer2 }}` was successful published! `(〃￣︶￣)人(￣︶￣〃)`
          report-failure: |-
            📦 Publishing failed. `(╯°□°)╯︵ ┻━┻`

            <details open> <summary> Output </summary>

            ```diff
            {0}
            ```

            </details>

      - name: Create tag
        if: ${{ steps.nbgv.outputs.PublicRelease == 'True' }}
        uses: actions/github-script@v6
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: "refs/tags/${{ steps.nbgv.outputs.SemVer2 }}",
              sha: context.sha
            })

      - name: Setup git-chglog
        if: ${{ steps.nbgv.outputs.PublicRelease == 'True' }}
        working-directory: /tmp
        run: |
          wget https://github.com/git-chglog/git-chglog/releases/download/v${VERSION}/git-chglog_${VERSION}_linux_amd64.tar.gz
          tar -xvf git-chglog_${VERSION}_linux_amd64.tar.gz
          sudo mv git-chglog /usr/local/bin/
        env:
          VERSION: "0.15.1"

      - name: Generate changelog
        if: ${{ steps.nbgv.outputs.PublicRelease == 'True' }}
        id: changelog
        shell: bash --noprofile --norc {0}
        run: |
          echo "Creating change log for tag: ${{ steps.nbgv.outputs.SemVer2 }}"
          git tag ${{ steps.nbgv.outputs.SemVer2 }}
          exec 5>&1
          out=$(git-chglog --config .github/git-chglog/config.yml ${{ steps.nbgv.outputs.SemVer2 }} 2>&1 | tee >(cat - >&5) ; exit ${PIPESTATUS[0]} )
          exit_code=$?
          out="${out//'%'/'%25'}" ; out="${out//$'\n'/'%0A'}" ; out="${out//$'\r'/'%0D'}"
          echo "::set-output name=out::$out"
          exec 5>&-
          exit $exit_code

      - name: Create Release
        if: ${{ steps.nbgv.outputs.PublicRelease == 'True' }}
        uses: actions/create-release@v1.1.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          prerelease: ${{ steps.nbgv.outputs.PrereleaseVersionNoLeadingHyphen != '' }}
          tag_name: ${{ steps.nbgv.outputs.SemVer2 }}
          release_name: ${{ steps.nbgv.outputs.SemVer2 }}
          body: ${{ steps.changelog.outputs.out }}

      - name: Report cancellation
        if: ${{ cancelled() }}
        uses: mshick/add-pr-comment@07f690343c25a94e24a8acb70d03c86b701ae322
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          allow-repeats: true
          message: |
            ⚠️ Test run cancelled. `(ง •_•)ง`

      - name: Report failure
        if: ${{ failure() && steps.build.outcome != 'failure' && steps.tests.outcome != 'failure' && steps.publish.outcome != 'failure' }}
        uses: mshick/add-pr-comment@07f690343c25a94e24a8acb70d03c86b701ae322
        with:
          allow-repeats: true
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          message: |
            ❌ Failed. `( ˘︹˘ )`
